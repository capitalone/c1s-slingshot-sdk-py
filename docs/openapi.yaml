openapi: 3.0.3
info:
  title: Capital One Slingshot API
  version: PLACEHOLDER
  description: |
    The Slingshot public API documentation for the Python SDK, shown in the
    Swagger UI, is currently a scaffold and does not yet reflect the production
    API

servers:
  - url: https://slingshot.capitalone.com/prod/api/gradient/v1
    description: Production

tags:
  - name: Projects
    description: Manage projects
  - name: Recommendations
    description: Generate and fetch project recommendations
  - name: Utility
    description: Health and utility endpoints

# Default security for all endpoints
security:
  - ApiKeyAuth: []

paths:
  /health:
    get:
      tags: [Utility]
      summary: Service health
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string, example: "ok" }
                  time:   { type: string, format: date-time }

  /projects:
    get:
      tags: [Projects]
      summary: List projects
      operationId: listProjects
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/Size'
        - $ref: '#/components/parameters/Sort'
      responses:
        '200':
          description: Page of projects
          headers:
            X-Total-Count:
              description: Total number of projects across all pages.
              schema: { type: integer, minimum: 0 }
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectPage'
              examples:
                sample:
                  value:
                    page: 1
                    size: 2
                    total: 42
                    items:
                      - id: "proj_123"
                        name: "Fraud Scoring"
                        description: "Detect anomalous transactions"
                        created_at: "2024-05-10T12:30:00Z"
                        updated_at: "2024-06-01T09:00:00Z"
                      - id: "proj_124"
                        name: "Churn Model"
                        description: "Predict churn propensity"
                        created_at: "2024-05-11T08:00:00Z"
                        updated_at: "2024-06-02T10:15:00Z"
    post:
      tags: [Projects]
      summary: Create project
      operationId: createProject
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProjectCreate' }
            examples:
              sample:
                value:
                  name: "Pricing Optimization"
                  product_code: "PRC"
                  description: "Optimize price points for conversions"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Project' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '409': { $ref: '#/components/responses/Conflict' }
        '422': { $ref: '#/components/responses/UnprocessableEntity' }

  /projects/{project_id}:
    get:
      tags: [Projects]
      summary: Get project
      operationId: getProject
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: Project
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Project' }
              examples:
                sample:
                  value:
                    id: "proj_123"
                    name: "Fraud Scoring"
                    description: "Detect anomalous transactions"
                    created_at: "2024-05-10T12:30:00Z"
                    updated_at: "2024-06-01T09:00:00Z"
        '404': { $ref: '#/components/responses/NotFound' }
    patch:
      tags: [Projects]
      summary: Update project
      operationId: updateProject
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ProjectUpdate' }
            examples:
              sample:
                value:
                  description: "Updated description"
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Project' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { $ref: '#/components/responses/Conflict' }
    delete:
      tags: [Projects]
      summary: Delete project
      operationId: deleteProject
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '204':
          description: Deleted (no content)
        '404': { $ref: '#/components/responses/NotFound' }

  /projects/{project_id}/recommendations:
    post:
      tags: [Recommendations]
      summary: Create recommendation for a project
      operationId: createProjectRecommendation
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecommendationCreate'
            examples:
              sample:
                value:
                  strategy: "cost_savings"
                  parameters:
                    threshold: 0.8
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Recommendation' }
        '404': { $ref: '#/components/responses/NotFound' }

  /projects/{project_id}/recommendations/{recommendation_id}:
    get:
      tags: [Recommendations]
      summary: Get recommendation
      operationId: getProjectRecommendation
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - in: path
          name: recommendation_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Recommendation
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Recommendation' }
        '404': { $ref: '#/components/responses/NotFound' }

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Api-Key

  parameters:
    ProjectId:
      in: path
      name: project_id
      required: true
      schema: { type: string }
      description: Unique project identifier.
    Page:
      in: query
      name: page
      schema: { type: integer, minimum: 1, default: 1 }
      description: 1-based page index.
    Size:
      in: query
      name: size
      schema: { type: integer, minimum: 1, maximum: 200, default: 50 }
      description: Page size.
    Sort:
      in: query
      name: sort
      schema: { type: string, example: "created_at:desc" }
      description: Optional sort (field:direction).

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Conflict:
      description: Conflict
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    UnprocessableEntity:
      description: Validation error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/ValidationError' }

  schemas:
    # ---- Core resources ----
    Project:
      type: object
      required: [id, name]
      properties:
        id: { type: string }
        name: { type: string }
        description: { type: string, nullable: true }
        app_id: { type: string, nullable: true }
        job_id: { type: string, nullable: true }
        created_at: { type: string, format: date-time, nullable: true }
        updated_at: { type: string, format: date-time, nullable: true }
        settings:
          $ref: '#/components/schemas/ProjectSettings'

    ProjectCreate:
      type: object
      required: [name]   # adjust requireds to match server
      properties:
        name: { type: string }
        product_code: { type: string, nullable: true }
        description: { type: string, nullable: true }
        app_id: { type: string, nullable: true }
        job_id: { type: string, nullable: true }
        settings:
          $ref: '#/components/schemas/ProjectSettings'

    ProjectUpdate:
      type: object
      description: Partial update; fields optional.
      properties:
        name: { type: string }
        product_code: { type: string, nullable: true }
        description: { type: string, nullable: true }
        app_id: { type: string, nullable: true }
        job_id: { type: string, nullable: true }
        settings:
          $ref: '#/components/schemas/ProjectSettings'

    ProjectSettings:
      type: object
      properties:
        sla_minutes: { type: integer, nullable: true }
        auto_apply_recs: { type: boolean, nullable: true }
        optimize_instance_size: { type: boolean, nullable: true }

    ProjectPage:
      type: object
      required: [page, size, total, items]
      properties:
        page: { type: integer }
        size: { type: integer }
        total: { type: integer }
        items:
          type: array
          items: { $ref: '#/components/schemas/Project' }

    RecommendationCreate:
      type: object
      properties:
        strategy:
          type: string
          description: Recommendation strategy identifier.
          example: cost_savings
        parameters:
          type: object
          additionalProperties: true
          description: Strategy-specific parameters.

    Recommendation:
      type: object
      description: Recommendation details.
      properties:
        id: { type: string, example: "rec_abc123" }
        project_id: { type: string, example: "proj_123" }
        created_at: { type: string, format: date-time }
        status:
          type: string
          enum: [pending, running, complete, failed]
        summary:
          type: string
          example: "Reduce instance size by one tier during off-peak hours."
        details:
          type: object
          additionalProperties: true

    # ---- Errors ----
    Error:
      type: object
      required: [code, message]
      properties:
        code: { type: string, example: "invalid_argument" }
        message: { type: string, example: "Invalid page size." }
        details:
          type: array
          items: { $ref: '#/components/schemas/ErrorDetail' }

    ErrorDetail:
      type: object
      properties:
        field: { type: string, example: "size" }
        issue: { type: string, example: "must be <= 200" }

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/Error'
